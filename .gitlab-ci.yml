include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - p4_sim
  - rtl_sim
  - app
  - ip
  - bitfile
  - validate
  - package
  - trigger_downstream

variables:
  GIT_STRATEGY: clone
  SEED: 0
  RANDOMIZE_SEED: 0
  SN_HW_APP_NAME: udplb

.common:
  image: $CI_REGISTRY/ht/xilinx-tools-docker:60278-g85aa767e
  before_script:
    - if [ $RANDOMIZE_SEED -gt 0 ]; then export SEED=$RANDOM; fi
    - echo "Running pipeline with SEED $SEED..."
  variables:
    XILINXD_LICENSE_FILE: "2100@dmv.es.net"
    # Required to keep click python module happy
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
    GIT_SUBMODULE_STRATEGY: recursive

p4bm:
  stage: p4_sim
  extends: .common
  tags:
    - ht-sim
  script:
    - apt update -y
    - apt install -y python3-setuptools
    - pip3 install scapy
    - make -s -C p4/sim build sim-all
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    paths:
      - p4/sim
  needs: []

sim_app_tests:
  stage: rtl_sim
  extends: .common
  tags:
    - ht-sim
  script:
    - make -s config
    - make -s -C tests/regression
    - grep 'PASSED.*suites passing' tests/regression/run_$SEED/sim.log
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    reports:
      junit:
        - tests/regression/run_*/tests.xml
    when: always
  timeout: 2h
  needs:
    - p4bm

app_cache_key:
  stage: app
  extends: .common
  tags:
    - ht-sim
  script:
    - |
      cat <<_EOF | tee dependencies.txt
      VIVADO_VERSION=$VIVADO_VERSION
      $(git submodule status -- esnet-smartnic-hw | awk '{ print $1,$2 }')
      _EOF
    - |
      cat <<_EOF | tee cache_key.env
      APP_CACHE_KEY=$(sha1sum dependencies.txt | awk '{ print $1 }')
      _EOF
  artifacts:
    reports:
      dotenv:
        cache_key.env
  needs: []

.app:
  stage: app
  extends: .common
  tags:
    - ht-synth
  script:
    - make -s config BOARD=$SN_HW_BOARD BUILD_NAME=open-nic-ci
    - make -s -C .app/src refresh
    - make -s -C .app/app_if build  BOARD=$SN_HW_BOARD BUILD_NAME=open-nic-ci
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    paths:
      - .app
    when: always
    expire_in: 1 week
  cache:
    - key: cache-app-$CI_COMMIT_REF_SLUG-$SN_HW_BOARD-$APP_CACHE_KEY
      fallback_keys:
        - cache-app-$CI_DEFAULT_BRANCH-$SN_HW_BOARD-$APP_CACHE_KEY
      paths:
        - .app
  timeout: 4h
  needs:
    - app_cache_key

app_au280:
  extends: .app
  variables:
    SN_HW_BOARD: au280

app_au55c:
  extends: .app
  variables:
    SN_HW_BOARD: au55c

ons_ip_cache_key:
  stage: ip
  extends: .common
  tags:
    - ht-sim
  script:
    - |
      cat <<_EOF | tee dependencies.txt
      VIVADO_VERSION=$VIVADO_VERSION
      $(git -C esnet-smartnic-hw submodule status open-nic-shell | awk '{ print $1,$2 }')
      _EOF
    - |
      cat <<_EOF | tee cache_key.env
      ONS_IP_CACHE_KEY=$(sha1sum dependencies.txt | awk '{ print $1 }')
      _EOF
  artifacts:
    reports:
      dotenv:
        cache_key.env
  needs: []

.ons_ip:
  stage: ip
  extends: .common
  tags:
    - ht-synth
  script:
    - make -s -C esnet-smartnic-hw -f makefile.esnet project_ip BOARD=$SN_HW_BOARD
  artifacts:
    paths:
      - esnet-smartnic-hw/open-nic-shell/build
  cache:
    - key: cache-ons_ip-$SN_HW_BOARD-$ONS_IP_CACHE_KEY
      paths:
        - esnet-smartnic-hw/open-nic-shell/build
  timeout: 4h
  needs:
    - ons_ip_cache_key

ons_ip_au280:
  extends: .ons_ip
  variables:
    SN_HW_BOARD: au280

ons_ip_au55c:
  extends: .ons_ip
  variables:
    SN_HW_BOARD: au55c

smartnic_ip_cache_key:
  stage: ip
  extends: .common
  tags:
    - ht-sim
  script:
    - |
      cat <<_EOF | tee dependencies.txt
      VIVADO_VERSION=$VIVADO_VERSION
      $(git submodule status --recursive -- esnet-smartnic-hw | awk '{ print $1,$2 }')
      _EOF
    - |
      cat <<_EOF | tee cache_key.env
      SMARTNIC_IP_CACHE_KEY=$(sha1sum dependencies.txt | awk '{ print $1 }')
      _EOF
  artifacts:
    reports:
      dotenv:
        cache_key.env
  needs: []

.smartnic_ip:
  stage: ip
  extends: .common
  tags:
    - ht-synth
  script:
    - make -s -C esnet-smartnic-hw/src refresh
    - make -s -C esnet-smartnic-hw/src synth COMPONENT=smartnic_250mhz.build BOARD=$SN_HW_BOARD
    - make -s -C esnet-smartnic-hw/src synth COMPONENT=smartnic.build BOARD=$SN_HW_BOARD
    - make -s -C esnet-smartnic-hw/src synth COMPONENT=smartnic_app.build BOARD=$SN_HW_BOARD
  artifacts:
    paths:
      - esnet-smartnic-hw/.out
  cache:
    - key: cache-smartnic_ip-$SN_HW_BOARD-$SMARTNIC_IP_CACHE_KEY
      paths:
        - esnet-smartnic-hw/.out
  timeout: 4h
  needs:
    - smartnic_ip_cache_key

smartnic_ip_au280:
  extends: .smartnic_ip
  variables:
    SN_HW_BOARD: au280

smartnic_ip_au55c:
  extends: .smartnic_ip
  variables:
    SN_HW_BOARD: au55c

.bitfile:
  stage: bitfile
  extends: .common
  tags:
    - ht-synth
  script:
    - |
      cat <<_EOF >> bitfile.env
      SN_HW_BOARD=$SN_HW_BOARD
      _EOF
    - cat bitfile.env
    - make -s -C esnet-smartnic-hw/src refresh
    - rm -rf .app/out/smartnic && cp -pr esnet-smartnic-hw/.out .app/out/smartnic 2>/dev/null && echo "Using pre-generated IP." || echo "No pre-generated IP available."
    - make -s build BOARD=$SN_HW_BOARD BUILD_NAME=open-nic-ci
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    paths:
      - .app
      - artifacts
      - esnet-smartnic-hw/open-nic-shell/build
    when: always
    reports:
      dotenv:
        bitfile.env
    expire_in: 2 weeks
  timeout: 9h

build_au280:
  extends: .bitfile
  variables:
    SN_HW_BOARD: au280
    IMPL_STRATEGY: Performance_ExplorePostRoutePhysOpt
  needs:
    - app_au280
    - ons_ip_au280
    - smartnic_ip_au280

build_au55c:
  extends: .bitfile
  variables:
    SN_HW_BOARD: au55c
    IMPL_STRATEGY: Performance_ExplorePostRoutePhysOpt
  needs:
    - app_au55c
    - ons_ip_au55c
    - smartnic_ip_au55c

.validate:
  stage: validate
  extends: .common
  tags:
    - ht-misc
  variables:
    VALIDATE_WNS_MIN: "-0.100"
    VALIDATE_TNS_MIN: "-100.0"
  script:
    - make -s -C esnet-smartnic-hw validate BOARD=$SN_HW_BOARD BUILD_NAME=open-nic-ci
  artifacts:
    reports:
      junit:
        - esnet-smartnic-hw/open-nic-shell/build/${SN_HW_BOARD}_open-nic-ci/build_summary.xml
  timeout: 30m
  rules:
    - allow_failure: true

validate_au280:
  extends: .validate
  variables:
    VALIDATE_WNS_MIN: "-0.100"
    VALIDATE_TNS_MIN: "-100.0"
  needs:
    - build_au280
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      allow_failure: true

validate_au55c:
  extends: .validate
  variables:
    VALIDATE_WNS_MIN: "-0.100"
    VALIDATE_TNS_MIN: "-100.0"
  needs:
    - build_au55c
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      allow_failure: true

.hwapi:
  stage: package
  extends: .common
  tags:
    - ht-misc
  before_script: []
  script:
    - unzip artifacts/open-nic-ci/artifacts.$SN_HW_BOARD.open-nic-ci.0.zip
    - |
      cat <<_EOF >> hwapi.env
      SN_HW_HWAPI_JOB_NUMBER=$CI_JOB_ID
      SN_HW_APP_NAME=$SN_HW_APP_NAME
      SN_HW_BOARD=$SN_HW_BOARD
      _EOF
    - cat hwapi.env
  artifacts:
    name: "artifacts.$SN_HW_BOARD.$SN_HW_APP_NAME.$CI_PIPELINE_ID"
    paths:
      - esnet-smartnic-hwapi
    when: always
    expire_in: 3 month
    reports:
      dotenv:
        hwapi.env
  timeout: 30m

hwapi_au280:
  extends: .hwapi
  needs:
    - build_au280

hwapi_au55c:
  extends: .hwapi
  needs:
    - build_au55c

.trigger_fw:
  stage: trigger_downstream
  variables:
    SN_HW_GROUP: $CI_PROJECT_NAMESPACE
    SN_HW_REPO: $CI_PROJECT_NAME
    SN_HW_BRANCH: $CI_COMMIT_BRANCH
    SN_HW_APP_NAME: $SN_HW_APP_NAME
    SN_HW_BOARD: $SN_HW_BOARD
    # override the artifact URL in the triggered repo so it pulls directly from the hwapi job from this pipeline
    ESNET_SMARTNIC_HWAPI_URL: "$CI_PROJECT_URL/-/jobs/$SN_HW_HWAPI_JOB_NUMBER/artifacts/download?file_type=archive"
  trigger:
    project: ht/esnet-smartnic-fw
    branch: main
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: manual
      allow_failure: true

fw_au280:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_au280
  needs:
    - hwapi_au280
    - validate_au280

fw_au55c:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_au55c
  needs:
    - hwapi_au55c
    - validate_au55c

